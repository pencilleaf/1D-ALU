module compare_auto (
    input clk,  // clock
    input rst,  // reset
    input trigger, // this will start the relevant states of the test
    output io_sel [4],  // Digit select on IO Shield
    output io_seg [8],  // 7-segment LEDs on IO Shield
    output a[16],  // The tester will output 16 bits of a  
    output b[16],  // The tester will output 16 bits of b
    output alufn[6],  // The tester will output 6 bits of alufn
    input out[16]  // the tester will take in the ouput of the alu_error and check its validity 
  ) {
  
  .clk(clk) {   
  
    .rst(rst) {
      // Define a finite state machine with 19 states 
      // One idle state, 16 test cases, a fail and a success state
      fsm state = {IDLE, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7, TEST8, 
      TEST9, TEST10, TEST11, TEST12, TEST13, TEST14, TEST15, TEST16, TEST17, TEST18,
        TEST19, TEST20, TEST21, TEST22, TEST23, TEST24, TEST25, TEST26, TEST27, FAIL, SUCCESS};
      multi_seven_seg seg;
      stateCounter sc;
    }
  }
  

  always {
    a = 0;
    b = 0;
    alufn = 6b0;

    // The segments will display "EYYY" by default
    seg.values = {4hb, 4hd, 4hd, 4hd};
    
    io_seg = ~seg.seg; // Connect segments to the driver
    io_sel = ~seg.sel; // Connect digit select to the driver
    
    // Set the initial state 
    if(trigger == 0){
        state.d = state.IDLE; // Set the initial state to idle because mojo_top initialises trigger to 0
        }
    
    // We use case statements to define the response for different states in the stae machine
    case (state.q) {
            
      state.IDLE:
        seg.values = {4hf, 4hb, 4hc, 4h0};    
        if(trigger == 1) {
          state.d = state.TEST1;
        }
      
      // TEST 1 CMPEQ, a<b (a>0, b>0)
      state.TEST1:
        a = 16b0000000000010101;
        b = 16b0000000000111010;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h1};  // 1
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST2;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 2 CMPEQ, a<b (a<0, b>0)
      state.TEST2:
        a = 16b1100111100101100;
        b = 16b0000000000111010;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h2};  // 2
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST3;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 3 CMPEQ, a<b (a<0, b<0)
      state.TEST3:
        a = 16b1100111100101100;
        b = 16b1101110100011100;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h3};  // 3
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST4;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 4 CMPEQ, a>b (a>0, b>0)
      state.TEST4:
        a = 16b0001110101101110;
        b = 16b0000000000111010;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h4};  // 4
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST5;
        }


        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 5 CMPEQ, a>b (a>0, b<0)
      state.TEST5:
        a = 16b0000000000111010;
        b = 16b1100111100101100;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h5};  // 5
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST6;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 6 CMPEQ, a>b (a<0, b<0)
      state.TEST6:
        a = 16b1101110100011100;
        b = 16b1100111100101100;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h6};  // 6
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST7;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 7 CMPEQ, a=b (a>0, b>0)
      state.TEST7:
        a = 16b0000000000111010;
        b = 16b0000000000111010;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h7};  // 7
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST8;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 8 CMPEQ, a=b (a=0, b=0)
      state.TEST8:
        a = 16b0000000000000000;
        b = 16b0000000000000000;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h8};  // 8
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST9;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 9 CMPEQ, a=b (a<0, b<0)
      state.TEST9:
        a = 16b1101110100011100;
        b = 16b1101110100011100;
        alufn = 6h33;
        seg.values = {4ha, 4ha, 4ha, 4h9};  // 9
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST10;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 10 CMPLT, a<b (a>0, b>0)
      state.TEST10:
        a = 16b0000000000010101;
        b = 16b0000000000111010;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h0};  // 10
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST11;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 11 CMPLT, a<b (a<0, b>0)
      state.TEST11:
        a = 16b1100111100101100;
        b = 16b0000000000111010;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h1};  // 11
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST12;
        }


        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 12 CMPLT, a<b (a<0, b<0)
      state.TEST12:
        a = 16b1100111100101100;
        b = 16b1101110100011100;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h2};  // 12
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST13;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 13 CMPLT, a>b (a>0, b>0)
      state.TEST13:
        a = 16b0001110101101110;
        b = 16b0000000000111010;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h3};  // 13
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST14;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 14 CMPLT, a>b (a>0, b<0)
      state.TEST14:
        a = 16b0000000000111010;
        b = 16b1100111100101100;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h4};  // 14
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST15;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 15 CMPLT, a>b (a<0, b<0)
      state.TEST15:
        a = 16b1101110100011100;
        b = 16b1100111100101100;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h5};  // 1
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST16;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 16 CMPLT, a=b (a>0, b>0)
      state.TEST16:
        a = 16b0000000000111010;
        b = 16b0000000000111010;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h6};  // 16
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST17;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 17 CMPLT, a=b (a=0, b=0)
      state.TEST17:
        a = 16b0000000000000000;
        b = 16b0000000000000000;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h7};  // 17
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST18;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 18 CMPLT, a=b (a<0, b<0)
      state.TEST18:
        a = 16b1101110100011100;
        b = 16b1101110100011100;
        alufn = 6h35;
        seg.values = {4ha, 4ha, 4h1, 4h8};  // 18
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST19;
        }
        
        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 19 CMPLE, a<b (a>0, b>0)
      state.TEST19:
        a = 16b0000000000010101;
        b = 16b0000000000111010;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h1, 4h9};  // 19
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST20;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 20 CMPLE, a<b (a<0, b>0)
      state.TEST20:
        a = 16b1100111100101100;
        b = 16b0000000000111010;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h0};  // 20
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST21;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 21 CMPLE, a<b (a<0, b<0)
      state.TEST21:
        a = 16b1100111100101100;
        b = 16b1101110100011100;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h1};  // 21
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST22;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 22 CMPLE, a>b (a>0, b>0)
      state.TEST22:
        a = 16b0001110101101110;
        b = 16b0000000000111010;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h2};  // 22
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST23;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 23 CMPLE, a>b (a>0, b<0)
      state.TEST23:
        a = 16b0000000000111010;
        b = 16b1100111100101100;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h3};  // 23
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST24;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 24 CMPLE, a>b (a<0, b<0)
      state.TEST24:
        a = 16b1101110100011100;
        b = 16b1100111100101100;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h4};  // 24
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b0 && sc.inc_state == 1) {
          state.d = state.TEST25;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
       // TEST 25 CMPLE, a=b (a>0, b>0)
      state.TEST25:
        a = 16b0000000000111010;
        b = 16b0000000000111010;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h5};  // 25
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST26;
        }



        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 26 CMPLE, a=b (a=0, b=0)
      state.TEST26:
        a = 16b0000000000000000;
        b = 16b0000000000000000;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h6};  // 26
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.TEST27;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST 27 CMPLE, a=b (a<0, b<0)
      state.TEST27:
        a = 16b1101110100011100;
        b = 16b1101110100011100;
        alufn = 6h37;
        seg.values = {4ha, 4ha, 4h2, 4h7};  // 27
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (out == 16b1 && sc.inc_state == 1) {
          state.d = state.SUCCESS;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
      state.FAIL:
        // This prints NAYC to indicate compare
        seg.values = {4hf, 4he, 4hd, 4hc};
        
      state.SUCCESS:
      // This prints YAYC to indicate compare
        seg.values = {4hd, 4he, 4hd, 4hc};
  }
}
}