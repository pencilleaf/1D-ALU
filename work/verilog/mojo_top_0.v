/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu_out;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out)
  );
  
  wire [16-1:0] M_alu_error_out;
  reg [16-1:0] M_alu_error_in;
  alu_error_2 alu_error (
    .in(M_alu_error_in),
    .out(M_alu_error_out)
  );
  
  reg [15:0] final;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_state = 4'd0;
  localparam ENTERA_state = 4'd1;
  localparam ENTERB_state = 4'd2;
  localparam COMPUTE_state = 4'd3;
  localparam AUTOADD_state = 4'd4;
  localparam AUTOCMP_state = 4'd5;
  localparam AUTOBOOL_state = 4'd6;
  localparam AUTOSHIFT_state = 4'd7;
  localparam AUTOMUL_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  reg [15:0] M_inputa_d, M_inputa_q = 1'h0;
  reg [15:0] M_inputb_d, M_inputb_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [4-1:0] M_adder_auto_io_sel;
  wire [8-1:0] M_adder_auto_io_seg;
  wire [16-1:0] M_adder_auto_a;
  wire [16-1:0] M_adder_auto_b;
  wire [6-1:0] M_adder_auto_alufn;
  reg [1-1:0] M_adder_auto_trigger;
  reg [16-1:0] M_adder_auto_out;
  adder_auto_5 adder_auto (
    .clk(clk),
    .rst(rst),
    .trigger(M_adder_auto_trigger),
    .out(M_adder_auto_out),
    .io_sel(M_adder_auto_io_sel),
    .io_seg(M_adder_auto_io_seg),
    .a(M_adder_auto_a),
    .b(M_adder_auto_b),
    .alufn(M_adder_auto_alufn)
  );
  wire [4-1:0] M_boolean_auto_io_sel;
  wire [8-1:0] M_boolean_auto_io_seg;
  wire [16-1:0] M_boolean_auto_a;
  wire [16-1:0] M_boolean_auto_b;
  wire [6-1:0] M_boolean_auto_alufn;
  reg [1-1:0] M_boolean_auto_trigger;
  reg [16-1:0] M_boolean_auto_out;
  boolean_auto_6 boolean_auto (
    .clk(clk),
    .rst(rst),
    .trigger(M_boolean_auto_trigger),
    .out(M_boolean_auto_out),
    .io_sel(M_boolean_auto_io_sel),
    .io_seg(M_boolean_auto_io_seg),
    .a(M_boolean_auto_a),
    .b(M_boolean_auto_b),
    .alufn(M_boolean_auto_alufn)
  );
  wire [4-1:0] M_shifter_auto_io_sel;
  wire [8-1:0] M_shifter_auto_io_seg;
  wire [16-1:0] M_shifter_auto_a;
  wire [16-1:0] M_shifter_auto_b;
  wire [6-1:0] M_shifter_auto_alufn;
  reg [1-1:0] M_shifter_auto_trigger;
  reg [16-1:0] M_shifter_auto_out;
  shifter_auto_7 shifter_auto (
    .clk(clk),
    .rst(rst),
    .trigger(M_shifter_auto_trigger),
    .out(M_shifter_auto_out),
    .io_sel(M_shifter_auto_io_sel),
    .io_seg(M_shifter_auto_io_seg),
    .a(M_shifter_auto_a),
    .b(M_shifter_auto_b),
    .alufn(M_shifter_auto_alufn)
  );
  wire [4-1:0] M_multiplier_auto_io_sel;
  wire [8-1:0] M_multiplier_auto_io_seg;
  wire [16-1:0] M_multiplier_auto_a;
  wire [16-1:0] M_multiplier_auto_b;
  wire [6-1:0] M_multiplier_auto_alufn;
  reg [1-1:0] M_multiplier_auto_trigger;
  reg [16-1:0] M_multiplier_auto_out;
  multiplier_auto_8 multiplier_auto (
    .clk(clk),
    .rst(rst),
    .trigger(M_multiplier_auto_trigger),
    .out(M_multiplier_auto_out),
    .io_sel(M_multiplier_auto_io_sel),
    .io_seg(M_multiplier_auto_io_seg),
    .a(M_multiplier_auto_a),
    .b(M_multiplier_auto_b),
    .alufn(M_multiplier_auto_alufn)
  );
  wire [4-1:0] M_compare_auto_io_sel;
  wire [8-1:0] M_compare_auto_io_seg;
  wire [16-1:0] M_compare_auto_a;
  wire [16-1:0] M_compare_auto_b;
  wire [6-1:0] M_compare_auto_alufn;
  reg [1-1:0] M_compare_auto_trigger;
  reg [16-1:0] M_compare_auto_out;
  compare_auto_9 compare_auto (
    .clk(clk),
    .rst(rst),
    .trigger(M_compare_auto_trigger),
    .out(M_compare_auto_out),
    .io_sel(M_compare_auto_io_sel),
    .io_seg(M_compare_auto_io_seg),
    .a(M_compare_auto_a),
    .b(M_compare_auto_b),
    .alufn(M_compare_auto_alufn)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_inputb_d = M_inputb_q;
    M_inputa_d = M_inputa_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 16'hbddd;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    M_alu_alufn = io_dip[16+2+5-:6];
    M_alu_error_in = M_alu_out;
    final = M_alu_out;
    if (io_dip[16+0+0-:1]) begin
      final = M_alu_error_out;
    end
    M_boolean_auto_trigger = 1'h0;
    M_adder_auto_trigger = 1'h0;
    M_shifter_auto_trigger = 1'h0;
    M_multiplier_auto_trigger = 1'h0;
    M_compare_auto_trigger = 1'h0;
    M_boolean_auto_out = 1'h0;
    M_adder_auto_out = 1'h0;
    M_shifter_auto_out = 1'h0;
    M_multiplier_auto_out = 1'h0;
    M_compare_auto_out = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        if (io_dip[16+1+0-:1]) begin
          M_state_d = ENTERA_state;
        end
        if (io_button[0+0-:1]) begin
          M_state_d = AUTOADD_state;
        end
        if (io_button[1+0-:1]) begin
          M_state_d = AUTOMUL_state;
        end
        if (io_button[2+0-:1]) begin
          M_state_d = AUTOCMP_state;
        end
        if (io_button[3+0-:1]) begin
          M_state_d = AUTOBOOL_state;
        end
        if (io_button[4+0-:1]) begin
          M_state_d = AUTOSHIFT_state;
        end
      end
      ENTERA_state: begin
        M_seg_values = 16'haaae;
        io_led[8+7-:8] = io_dip[8+7-:8];
        io_led[0+7-:8] = io_dip[0+7-:8];
        M_inputa_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        if (!io_dip[16+1+0-:1]) begin
          M_state_d = ENTERB_state;
        end else begin
          if (rst) begin
            M_state_d = IDLE_state;
          end
        end
      end
      ENTERB_state: begin
        M_seg_values = 16'haaa8;
        io_led[8+7-:8] = io_dip[8+7-:8];
        io_led[0+7-:8] = io_dip[0+7-:8];
        M_inputb_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        if (io_dip[16+1+0-:1]) begin
          M_state_d = COMPUTE_state;
        end else begin
          if (rst) begin
            M_state_d = IDLE_state;
          end
        end
      end
      COMPUTE_state: begin
        M_seg_values = 16'haef5;
        M_alu_a = M_inputa_q;
        M_alu_b = M_inputb_q;
        io_led[8+7-:8] = final[8+7-:8];
        io_led[0+7-:8] = final[0+7-:8];
        if (rst) begin
          M_state_d = IDLE_state;
        end
      end
      AUTOADD_state: begin
        M_adder_auto_trigger = 1'h1;
        M_alu_a = M_adder_auto_a;
        M_alu_b = M_adder_auto_b;
        M_alu_alufn = M_adder_auto_alufn;
        M_adder_auto_out = final;
        io_seg = M_adder_auto_io_seg;
        io_sel = M_adder_auto_io_sel;
        if (rst) begin
          M_adder_auto_trigger = 1'h0;
          M_state_d = IDLE_state;
        end
      end
      AUTOBOOL_state: begin
        M_boolean_auto_trigger = 1'h1;
        M_alu_a = M_boolean_auto_a;
        M_alu_b = M_boolean_auto_b;
        M_alu_alufn = M_boolean_auto_alufn;
        M_boolean_auto_out = final;
        io_seg = M_boolean_auto_io_seg;
        io_sel = M_boolean_auto_io_sel;
        if (rst) begin
          M_boolean_auto_trigger = 1'h0;
          M_state_d = IDLE_state;
        end
      end
      AUTOSHIFT_state: begin
        M_shifter_auto_trigger = 1'h1;
        M_alu_a = M_shifter_auto_a;
        M_alu_b = M_shifter_auto_b;
        M_alu_alufn = M_shifter_auto_alufn;
        M_shifter_auto_out = final;
        io_seg = M_shifter_auto_io_seg;
        io_sel = M_shifter_auto_io_sel;
        if (rst) begin
          M_boolean_auto_trigger = 1'h0;
          M_state_d = IDLE_state;
        end
      end
      AUTOCMP_state: begin
        M_compare_auto_trigger = 1'h1;
        M_alu_a = M_compare_auto_a;
        M_alu_b = M_compare_auto_b;
        M_alu_alufn = M_compare_auto_alufn;
        M_compare_auto_out = final;
        io_seg = M_compare_auto_io_seg;
        io_sel = M_compare_auto_io_sel;
        if (rst) begin
          M_compare_auto_trigger = 1'h0;
          M_state_d = IDLE_state;
        end
      end
      AUTOMUL_state: begin
        M_multiplier_auto_trigger = 1'h1;
        M_alu_a = M_multiplier_auto_a;
        M_alu_b = M_multiplier_auto_b;
        M_alu_alufn = M_multiplier_auto_alufn;
        M_multiplier_auto_out = final;
        io_seg = M_multiplier_auto_io_seg;
        io_sel = M_multiplier_auto_io_sel;
        if (rst) begin
          M_multiplier_auto_trigger = 1'h0;
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
    
    if (rst == 1'b1) begin
      M_inputa_q <= 1'h0;
      M_inputb_q <= 1'h0;
    end else begin
      M_inputa_q <= M_inputa_d;
      M_inputb_q <= M_inputb_d;
    end
  end
  
endmodule
